<?php
/**
 * Abstract class for all classes that define routes will use.
 *
 * @package   Pods REST API
 * @license   GPL-2.0+
 * @copyright 2015 Pods Framework
 */

namespace pods_rest_api\infrastructure;

abstract class request_controller extends \WP_REST_Controller {

	/**
	 * URL for this route
	 *
	 * NOTE: Configuration Object
	 *
	 * @since 0.0.2
	 *
	 * @access protected
	 */
	protected $config;

	/**
	 * The Pods object
	 *
	 * @since 0.0.2
	 *
	 * @var \Pods $pods_object
	 */
	public $pods_object;

	/**
	 * Constructor for parent class.
	 *
	 * @param array $config
	 *
	 * @since 0.0.2
	 */
	public function __construct( $config ) {
		$this->config = $config;
		$this->set_pods_object();
	}


	/**
	 * Placeholder method!
	 *
	 * @return object
	 */
	public function error( $message, $data = array(), $return_partial = true ) {
		$error          = new \stdClass();
		$error->code    = 500;
		$error->message = $message;
		if ( $return_partial ) {
			$error->data = $data;
		} else {
			$error->data = $message;
		}

		return $error;
	}

	/**
	 * Find type of current Pod
	 *
	 * @since 0.0.2
	 *
	 * @return string
	 */
	public function find_type() {
		return $this->pods_object->pod_data[ 'type' ];
	}


	/**
	 * Default permissions check.
	 *
	 * Can be overridden in a variety of ways:
	 * 1) When declaring a route, set a different permissions  callback.
	 * 2) Override this method in parent class
	 *
	 * @since 0.0.1
	 *
	 * @param \WP_REST_Request $request Full data about the request.
	 *
	 * @return bool|mixed|void
	 */
	public function permissions_check( $request ) {
		$pod = $this->pods_object->pod;
		$args = (array) $request->get_params();
		$item = pods_v_sanitized( 'id', $args, 0 );
		$atts = $request->get_attributes();
		$transports = $atts[ 'methods' ];
		$callback = $atts[ 'callback' ];
		if ( isset( $callback[1] ) ) {
			$callback = $callback[1];
		}

		if ( 'pod' == $this->find_type() ) {
			$prefix = 'pods';
			$suffix = $pod;

		}else {
			$capability_type = $this->pods_object->pod_data['options']['capability_type'];
			if(  'custom' == $capability_type ) {
				$prefix = '';
				$suffix = $this->pods_object->pod_data['options']['capability_type_custom'];
			}else{
				$prefix ='';
				$suffix = $capability_type;
			}

		}

		if ( is_user_logged_in() &&  $pod && $callback && is_string( $pod ) && is_string( $callback ) ) {
			if ( in_array( $callback, array( 'add_item', 'duplicate_item' ) ) ) {
				$check = $prefix . '_add_' . $suffix;
			} elseif ( 'save_item' == $callback ) {
				$check = $prefix . '_edit_' . $suffix;
			} elseif ( 'delete_item' == $callback ) {
				$check = $prefix . '_delete_' . $suffix;
			} else {
				$check = '';
			}

			$access = current_user_can( $check );
		} else {
			$access = false;
		}

		/**
		 * Filter REST API access.
		 *
		 * Note: Runs BEFORE dynamically named filters, which can override it. Use this filter for global settings.
		 *
		 * @since 0.0.2
		 *
		 * @param bool $access Whether to grant access or not.
		 * @param string $callback Name of callback function/method
		 * @param string $pod Name of Pod
		 * @param int $tem ID of current Pod item being queried for. Will be 0 if request is not for a single item.
		 * @param array $transports Current transport methods being used
		 */
		$access = apply_filters( 'pods_rest_api_access_pods', $access, $callback, $pod, $item, $transports );


		/**
		 * Filter REST API access by callback name
		 *
		 * Name of filter is dynamically generated by callback name.
		 *
		 * Note: runs before the filter for speciifc Pods, which can ovveride it.
		 *
		 * @since 0.0.2
		 *
		 * @param bool $access Whether to grant access or not.
		 * @param string $callback Name of callback function/method
		 * @param string $pod Name of Pod
		 * @param int $tem ID of current Pod item being queried for. Will be 0 if request is not for a single item.
		 * @param array $transports Current transport methods being used
		 */
		$access = apply_filters( 'pods_rest_api_access_pods_' . $callback, $access, $callback, $pod, $item, $transports );

		/**
		 * Filter REST API access by Pod
		 *
		 * Name of filter is dynamically generated by Pod name.
		 *
		 * @since 0.0.2
		 *
		 * @param bool $access Whether to grant access or not.
		 * @param string $callback Name of callback function/method
		 * @param string $pod Name of Pod
		 * @param int $tem ID of current Pod item being queried for. Will be 0 if request is not for a single item.
		 * @param array $transports Current transport methods being used
		 */
		$access = apply_filters( 'pods_rest_api_access_pods_' . $pod, $access, $callback, $pod, $item, $transports );


		return $access;

	}

	/**
	 * Set the pods_object property of this class
	 *
	 * @since 0.0.2
	 *
	 * @access protected
	 */
	private function set_pods_object() {
		$this->pods_object = pods( $this->config['pod_name'] );
	}



}
